# üìò Machine Learning & Data Science Notes

## 1. Quy tr√¨nh l√†m vi·ªác c·ªßa Machine Learning (Workflow)

![Quy tr√¨nh Machine Learning](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/ml_workflow.png)  
*H√¨nh 1: S∆° ƒë·ªì quy tr√¨nh Machine Learning, t·ª´ x√°c ƒë·ªãnh v·∫•n ƒë·ªÅ ƒë·∫øn gi√°m s√°t m√¥ h√¨nh.*

1. **X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ**  
   - Hi·ªÉu r√µ m·ª•c ti√™u: d·ª± ƒëo√°n, ph√¢n lo·∫°i, ph√¢n c·ª•m, g·ª£i √Ω‚Ä¶  
   - V√≠ d·ª•: D·ª± ƒëo√°n gi√° nh√†, ph√¢n lo·∫°i email spam/kh√¥ng spam.

2. **Thu th·∫≠p d·ªØ li·ªáu (Data Collection)**  
   - Ngu·ªìn d·ªØ li·ªáu: CSDL (SQL/NoSQL), file CSV, API, web scraping.  
   - L∆∞u √Ω: Ki·ªÉm tra ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu ngay t·ª´ ƒë·∫ßu.

3. **Kh√°m ph√° d·ªØ li·ªáu & Ti·ªÅn x·ª≠ l√Ω (EDA & Pre-processing)**  
   - Ki·ªÉm tra k√≠ch th∆∞·ªõc, ki·ªÉu d·ªØ li·ªáu, gi√° tr·ªã null.  
   - Visualization (matplotlib, seaborn, plotly).  
   - L√†m s·∫°ch d·ªØ li·ªáu (missing values, outliers).  
   - Feature engineering: t·∫°o th√™m bi·∫øn c√≥ √Ω nghƒ©a.

4. **Chia d·ªØ li·ªáu (Data Splitting)**  
   - Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán (train, 70-80%), t·∫≠p ki·ªÉm tra (test, 20-30%), v√† t·∫≠p x√°c th·ª±c (validation, n·∫øu c·∫ßn) ƒë·ªÉ ƒë√°nh gi√° m√¥ h√¨nh kh√°ch quan, tr√°nh overfitting.  
   - **Stratified Split**: ƒê·ªëi v·ªõi d·ªØ li·ªáu kh√¥ng c√¢n b·∫±ng (v√≠ d·ª•: l·ªõp thi·ªÉu s·ªë ch·ªâ 10%), ƒë·∫£m b·∫£o t·ª∑ l·ªá l·ªõp ƒë·ªìng ƒë·ªÅu ·ªü c√°c t·∫≠p.  
   - V√≠ d·ª• m√£ Python v·ªõi scikit-learn:  
     ```python
     from sklearn.model_selection import train_test_split
     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
     ```

5. **X√¢y d·ª±ng m√¥ h√¨nh (Model Building)**  
   - Ch·ªçn m√¥ h√¨nh: h·ªìi quy tuy·∫øn t√≠nh, logistic, decision tree, random forest, neural network.  
   - Hu·∫•n luy·ªán m√¥ h√¨nh b·∫±ng d·ªØ li·ªáu train.  

6. **ƒêi·ªÅu ch·ªânh si√™u tham s·ªë (Hyperparameter Tuning)**  
   - T·ªëi ∆∞u h√≥a si√™u tham s·ªë (nh∆∞ alpha trong regularization) ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t.  
   - Ph∆∞∆°ng ph√°p:  
     - **Grid Search**: Th·ª≠ t·∫•t c·∫£ t·ªï h·ª£p si√™u tham s·ªë trong l∆∞·ªõi.  
     - **Random Search**: Th·ª≠ ng·∫´u nhi√™n ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian.  
     - **Bayesian Optimization**: D√πng x√°c su·∫•t ƒë·ªÉ ∆∞u ti√™n c√°c gi√° tr·ªã t·ªët.  
   - V√≠ d·ª• Grid Search:  
     ```python
     from sklearn.model_selection import GridSearchCV
     from sklearn.linear_model import Ridge
     param_grid = {'alpha': [0.1, 1, 10]}
     grid_search = GridSearchCV(Ridge(), param_grid, cv=5)
     grid_search.fit(X_train, y_train)
     best_alpha = grid_search.best_params_['alpha']
     ```

7. **ƒê√°nh gi√° & Tri·ªÉn khai (Evaluation & Deployment)**  
   - ƒê√°nh gi√° b·∫±ng t·∫≠p test v·ªõi c√°c metric (Accuracy, RMSE, MAE, AUC, F1-score‚Ä¶).  
   - Tri·ªÉn khai m√¥ h√¨nh v√†o h·ªá th·ªëng th·ª±c t·∫ø (API, Web app).  
   - **Gi√°m s√°t v√† b·∫£o tr√¨**: Theo d√µi hi·ªáu su·∫•t (data drift), hu·∫•n luy·ªán l·∫°i ƒë·ªãnh k·ª≥, A/B testing ƒë·ªÉ so s√°nh m√¥ h√¨nh m·ªõi/c≈©.  
   - C√¥ng c·ª•: MLflow, TensorBoard.

---

## 2. L√†m vi·ªác v·ªõi D·ªØ li·ªáu trong Python

### 2.1 Pandas
- **ƒê·ªçc CSV**:  
  ```python
  import pandas as pd
  df = pd.read_csv("data.csv")
  ```
- Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu SQL query th√†nh DataFrame:  
  ```python
  import sqlite3
  conn = sqlite3.connect("database.db")
  query = "SELECT * FROM users"
  df = pd.read_sql_query(query, conn)
  ```

### 2.2 SQL & Python
- K·∫øt n·ªëi **sqlite3**:  
  ```python
  import sqlite3
  conn = sqlite3.connect("example.db")
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM table_name")
  results = cursor.fetchall()
  ```

### 2.3 NoSQL & MongoDB
![C·∫•u tr√∫c d·ªØ li·ªáu JSON](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/json_structure.png)  
*H√¨nh 2: So s√°nh d·ªØ li·ªáu JSON (MongoDB) v·ªõi b·∫£ng SQL.*

- **NoSQL**: CSDL phi quan h·ªá, d·ªØ li·ªáu th∆∞·ªùng d∆∞·ªõi d·∫°ng **JSON**.  
  - C√°c lo·∫°i ph·ªï bi·∫øn:  
    - Document DB (MongoDB)  
    - Graph DB (Neo4j)  
    - Wide-column DB (Cassandra)  
    - Key-Value DB (Redis)
- K·∫øt n·ªëi MongoDB v·ªõi Python (pymongo):  
  ```python
  from pymongo import MongoClient
  client = MongoClient("mongodb://localhost:27017/")
  db = client["mydatabase"]
  collection = db["users"]
  data = collection.find()
  ```

### 2.4 L·∫•y d·ªØ li·ªáu t·ª´ API
- S·ª≠ d·ª•ng th∆∞ vi·ªán **requests** ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API (v√≠ d·ª•: Twitter, Google Maps).  
- X·ª≠ l√Ω authentication v·ªõi API keys ho·∫∑c OAuth.  
- V√≠ d·ª•:  
  ```python
  import requests
  response = requests.get("https://api.example.com/data?api_key=your_key")
  data = response.json()
  df = pd.DataFrame(data['results'])
  ```

### 2.5 X·ª≠ l√Ω d·ªØ li·ªáu l·ªõn (Big Data Handling)
![So s√°nh hi·ªáu su·∫•t](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/pandas_dask_spark.png)  
*H√¨nh 3: So s√°nh t·ªëc ƒë·ªô x·ª≠ l√Ω c·ªßa Pandas, Dask, v√† PySpark v·ªõi d·ªØ li·ªáu l·ªõn.*

- V·ªõi d·ªØ li·ªáu l·ªõn (h√†ng tri·ªáu h√†ng), Pandas c√≥ th·ªÉ ch·∫≠m ho·∫∑c h·∫øt RAM.  
- **Dask**: M·ªü r·ªông Pandas, t√≠nh to√°n song song.  
- **PySpark**: X·ª≠ l√Ω d·ªØ li·ªáu ph√¢n t√°n tr√™n cluster (Hadoop, cloud).  
- V√≠ d·ª• v·ªõi Dask:  
  ```python
  import dask.dataframe as dd
  df = dd.read_csv("large_data.csv")
  df = df.compute()  # Ch·ªâ t√≠nh to√°n khi c·∫ßn
  ```

---

## 3. X·ª≠ l√Ω D·ªØ li·ªáu (Data Cleaning & Preprocessing)

### 3.1 X·ª≠ l√Ω gi√° tr·ªã thi·∫øu (Missing Values)
![Heatmap gi√° tr·ªã null](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/missing_values_heatmap.png)  
*H√¨nh 4: Heatmap hi·ªÉn th·ªã gi√° tr·ªã null tr∆∞·ªõc v√† sau khi x·ª≠ l√Ω.*

- **X√≥a h√†ng c√≥ missing**: Nhanh nh∆∞ng c√≥ th·ªÉ m·∫•t d·ªØ li·ªáu.  
- **Thay th·∫ø (imputation)**:  
  - Trung b√¨nh (mean), trung v·ªã (median), mode.  
  - S·ª≠ d·ª•ng m√¥ h√¨nh (KNN Imputer, Regression Imputer).  

### 3.2 Bi·∫øn ƒë·ªïi d·ªØ li·ªáu
![Log Transformation](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/log_transformation.png)  
*H√¨nh 5: Ph√¢n ph·ªëi d·ªØ li·ªáu tr∆∞·ªõc v√† sau log transformation.*

- **Log Transformation**: D√πng cho d·ªØ li·ªáu l·ªách (skewed), v√≠ d·ª•: gi√° nh√†.  
  ```python
  import numpy as np
  df["col"] = np.log1p(df["col"])
  ```
- **One-hot Encoding**:  
  ```python
  pd.get_dummies(df, columns=["category"])
  ```
- **Chu·∫©n h√≥a (Scaling)**:  
  - MinMaxScaler: d·ªØ li·ªáu v·ªÅ [0,1].  
  - StandardScaler: mean=0, std=1.

### 3.3 T·∫°o ƒë·∫∑c tr∆∞ng m·ªõi (Feature Engineering)
- **Interaction Features**: K·∫øt h·ª£p nhi·ªÅu bi·∫øn (nh√¢n/chia).  
  - V√≠ d·ª•: `df["price_per_area"] = df["price"] / df["area"]`

### 3.4 X·ª≠ l√Ω d·ªØ li·ªáu kh√¥ng c√¢n b·∫±ng (Imbalanced Data)
![SMOTE](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/smote_before_after.png)  
*H√¨nh 6: Minh h·ªça d·ªØ li·ªáu tr∆∞·ªõc v√† sau khi √°p d·ª•ng SMOTE.*

- Trong ph√¢n lo·∫°i, l·ªõp thi·ªÉu s·ªë (v√≠ d·ª•: 10% spam) g√¢y thi√™n v·ªã.  
- Ph∆∞∆°ng ph√°p:  
  - **Oversampling**: TƒÉng d·ªØ li·ªáu l·ªõp thi·ªÉu s·ªë (SMOTE).  
  - **Undersampling**: Gi·∫£m d·ªØ li·ªáu l·ªõp ƒëa s·ªë.  
  - **Class Weights**: G√°n tr·ªçng s·ªë cao h∆°n cho l·ªõp thi·ªÉu s·ªë.  
- V√≠ d·ª• SMOTE:  
  ```python
  from imblearn.over_sampling import SMOTE
  smote = SMOTE(random_state=42)
  X_resampled, y_resampled = smote.fit_resample(X_train, y_train)
  ```

### 3.5 X·ª≠ l√Ω d·ªØ li·ªáu vƒÉn b·∫£n v√† th·ªùi gian
- **Text Data**: Chuy·ªÉn vƒÉn b·∫£n th√†nh s·ªë (TF-IDF, Word2Vec).  
  ```python
  from sklearn.feature_extraction.text import TfidfVectorizer
  vectorizer = TfidfVectorizer()
  X_text = vectorizer.fit_transform(df["text_column"])
  ```
- **Datetime**: Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng (ng√†y, th√°ng, gi·ªù).  
  ```python
  df['date'] = pd.to_datetime(df['date'])
  df['month'] = df['date'].dt.month
  ```

---

## 4. Th·ªëng k√™ & Suy di·ªÖn (Statistics & Inference)

- **∆Ø·ªõc l∆∞·ª£ng (Estimation)**: ƒê∆∞a ra gi√° tr·ªã x·∫•p x·ªâ cho tham s·ªë t·ªïng th·ªÉ.  
- **Sai s·ªë chu·∫©n (Standard Error)**: ƒêo ƒë·ªô bi·∫øn ƒë·ªông c·ªßa ∆∞·ªõc l∆∞·ª£ng.  
- **Suy di·ªÖn th·ªëng k√™ (Statistical Inference)**: T·ª´ m·∫´u suy ra qu·∫ßn th·ªÉ.

### 4.1 Frequentist vs Bayesian
- **Frequentist**: Ch·ªâ d·ª±a v√†o d·ªØ li·ªáu hi·ªán c√≥.  
- **Bayesian**: K·∫øt h·ª£p d·ªØ li·ªáu v·ªõi prior knowledge.  
- V√≠ d·ª•:  
  - Frequentist: "X√°c su·∫•t tung xu ra ng·ª≠a l√† 0.5 (d·ª±a v√†o nhi·ªÅu l·∫ßn tung)."  
  - Bayesian: "D·ª±a tr√™n kinh nghi·ªám, xu h∆°i l·ªách, prior ‚â† 0.5."

### 4.2 Ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt (Hypothesis Testing)
![p-value](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/p_value_distribution.png)  
*H√¨nh 7: Minh h·ªça p-value v√† v√πng b√°c b·ªè trong ki·ªÉm ƒë·ªãnh gi·∫£ thuy·∫øt.*

- **Null Hypothesis (H0)**: Gi·∫£ thuy·∫øt m·∫∑c ƒë·ªãnh (kh√¥ng c√≥ s·ª± kh√°c bi·ªát).  
- **Alternative Hypothesis (H1)**: Gi·∫£ thuy·∫øt thay th·∫ø.  
- **p-value**: N·∫øu p < 0.05, b√°c b·ªè H0.  
- V√≠ d·ª• t-test:  
  ```python
  from scipy.stats import ttest_ind
  stat, p_value = ttest_ind(group1, group2)
  if p_value < 0.05:
      print("C√≥ s·ª± kh√°c bi·ªát ƒë√°ng k·ªÉ")
  ```

### 4.3 Bias-Variance Tradeoff
![Bias-Variance Tradeoff](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/bias_variance_tradeoff.png)  
*H√¨nh 8: ƒê·ªì th·ªã minh h·ªça m·ªëi quan h·ªá gi·ªØa bias, variance v√† l·ªói t·ªïng qu√°t.*

- **Bias Cao (Underfitting)**: M√¥ h√¨nh qu√° ƒë∆°n gi·∫£n, kh√¥ng n·∫Øm b·∫Øt pattern.  
- **Variance Cao (Overfitting)**: M√¥ h√¨nh qu√° ph·ª©c t·∫°p, h·ªçc nhi·ªÖu.  
- **Tradeoff**: C√¢n b·∫±ng b·∫±ng regularization ho·∫∑c cross-validation.

---

## 5. EDA (Exploratory Data Analysis)

![Correlation Heatmap](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/correlation_heatmap.png)  
*H√¨nh 9: Heatmap hi·ªÉn th·ªã correlation gi·ªØa c√°c bi·∫øn.*

- **M·ª•c ƒë√≠ch**: Hi·ªÉu d·ªØ li·ªáu tr∆∞·ªõc khi x√¢y m√¥ h√¨nh.  
- **C√¥ng c·ª•**:  
  - `df.describe()`  
  - `df.info()`  
  - Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi: histogram, boxplot.  
  - Ki·ªÉm tra correlation: `df.corr()`

![Boxplot](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/boxplot_distribution.png)  
*H√¨nh 10: Boxplot minh h·ªça ph√¢n ph·ªëi v√† outliers c·ªßa m·ªôt bi·∫øn.*

### 5.1 Ph√°t hi·ªán ƒëa c·ªông tuy·∫øn (Multicollinearity Detection)
![VIF Plot](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/vif_plot.png)  
*H√¨nh 11: Bi·ªÉu ƒë·ªì VIF cho c√°c bi·∫øn ƒë·ªôc l·∫≠p.*

- Bi·∫øn ƒë·ªôc l·∫≠p t∆∞∆°ng quan cao g√¢y b·∫•t ·ªïn cho m√¥ h√¨nh.  
- **VIF (Variance Inflation Factor)**: VIF > 5 th√¨ lo·∫°i b·ªè bi·∫øn.  
  ```python
  from statsmodels.stats.outliers_influence import variance_inflation_factor
  vif_data = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
  ```

### 5.2 L·ª±a ch·ªçn ƒë·∫∑c tr∆∞ng (Feature Selection)
- Gi·∫£m s·ªë bi·∫øn ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô, gi·∫£m overfitting.  
- **Filter Methods**: D·ª±a tr√™n th·ªëng k√™ (correlation, chi-square).  
- **Wrapper Methods**: Th·ª≠ nghi·ªám v·ªõi m√¥ h√¨nh (forward/backward selection).  
- **Embedded Methods**: Trong m√¥ h√¨nh (Lasso t·ª± lo·∫°i bi·∫øn).

---

## 6. Machine Learning Models

### 6.1 H·ªìi quy tuy·∫øn t√≠nh (Linear Regression)
- D·ªÖ d√πng, d·ªÖ hi·ªÉu.  
- Nh∆∞·ª£c ƒëi·ªÉm: D·ªÖ overfit n·∫øu d·ªØ li·ªáu phi tuy·∫øn.

### 6.2 Ch√≠nh quy h√≥a (Regularization)
- **Ridge Regression (L2)**: Gi·∫£m h·ªá s·ªë nh∆∞ng kh√¥ng lo·∫°i b·ªè.  
- **Lasso Regression (L1)**: Tri·ªát ti√™u h·ªá s·ªë, ch·ªçn l·ªçc ƒë·∫∑c tr∆∞ng.  
- **Elastic Net**: K·∫øt h·ª£p L1 v√† L2.  

### 6.3 Ki·ªÉm ƒë·ªãnh ch√©o (Cross-validation)
- Ch·ªçn tham s·ªë t·ªëi ∆∞u, tr√°nh overfitting.  
  ```python
  from sklearn.linear_model import RidgeCV
  model = RidgeCV(alphas=[0.1, 1, 10])
  model.fit(X_train, y_train)
  ```

### 6.4 M√¥ h√¨nh ph√¢n lo·∫°i (Classification Models)
![Decision Tree](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/decision_tree.png)  
*H√¨nh 12: C·∫•u tr√∫c c·ªßa m·ªôt decision tree.*

![SVM Hyperplane](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/svm_hyperplane.png)  
*H√¨nh 13: Minh h·ªça hyperplane trong SVM.*

- **Logistic Regression**: Ph√¢n lo·∫°i nh·ªã ph√¢n (sigmoid).  
- **Decision Trees**: X·ª≠ l√Ω phi tuy·∫øn, d·ªÖ overfit.  
- **Random Forest**: K·∫øt h·ª£p nhi·ªÅu trees, gi·∫£m variance.  
- **SVM**: T√¨m hyperplane ph√¢n c√°ch t·ªëi ∆∞u.  
  ```python
  from sklearn.linear_model import LogisticRegression
  model = LogisticRegression()
  model.fit(X_train, y_train)
  ```

### 6.5 H·ªçc kh√¥ng gi√°m s√°t (Unsupervised Learning)
- **Clustering (K-Means)**: Nh√≥m d·ªØ li·ªáu t∆∞∆°ng t·ª±, ch·ªçn K b·∫±ng elbow method.  
- **PCA**: Gi·∫£m chi·ªÅu d·ªØ li·ªáu, gi·ªØ th√¥ng tin ch√≠nh.  
  ```python
  from sklearn.cluster import KMeans
  kmeans = KMeans(n_clusters=3)
  clusters = kmeans.fit_predict(X)
  ```

### 6.6 Neural Networks
![Neural Network](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/neural_network.png)  
*H√¨nh 14: S∆° ƒë·ªì c·∫•u tr√∫c neural network v·ªõi input, hidden layers, v√† output.*

- M√¥ h√¨nh ph·ª©c t·∫°p cho d·ªØ li·ªáu l·ªõn (h√¨nh ·∫£nh, vƒÉn b·∫£n).  
- **C·∫•u tr√∫c**: Input, hidden layers, output v·ªõi activation (ReLU, sigmoid).  
  ```python
  from keras.models import Sequential
  from keras.layers import Dense
  model = Sequential()
  model.add(Dense(10, activation='relu', input_shape=(n_features,)))
  model.add(Dense(1, activation='sigmoid'))
  ```

---

## 7. ƒê·∫°o ƒë·ª©c v√† Th·ª±c ti·ªÖn trong ML (Ethics & Best Practices)

![Model Bias](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/model_bias.png)  
*H√¨nh 15: Minh h·ªça bias trong d·ª± ƒëo√°n c·ªßa m√¥ h√¨nh.*

- **Bias v√† Fairness**: M√¥ h√¨nh c√≥ th·ªÉ thi√™n v·ªã (v√≠ d·ª•: ph√¢n bi·ªát gi·ªõi t√≠nh trong tuy·ªÉn d·ª•ng). Gi·∫£i ph√°p: Ki·ªÉm tra d·ªØ li·ªáu, d√πng fairness metrics (demographic parity).  
- **Privacy**: B·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n (GDPR), d√πng anonymization ho·∫∑c differential privacy.  
- **Explainability**: Gi·∫£i th√≠ch m√¥ h√¨nh "h·ªôp ƒëen" v·ªõi SHAP ho·∫∑c LIME.  

![SHAP Summary](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/shap_summary.png)  
*H√¨nh 16: SHAP summary plot gi·∫£i th√≠ch t·∫ßm quan tr·ªçng c·ªßa c√°c bi·∫øn.*

```python
import shap
explainer = shap.Explainer(model)
shap_values = explainer(X_test)
shap.summary_plot(shap_values, X_test)
```

---

## 8. Hi·ªÉn th·ªã ·∫£nh tr√™n GitHub

Khi upload file Markdown l√™n GitHub, ƒë√¥i khi ·∫£nh kh√¥ng hi·ªÉn th·ªã do l·ªói ƒë∆∞·ªùng d·∫´n ho·∫∑c c·∫•u h√¨nh. D∆∞·ªõi ƒë√¢y l√† c√°c b∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o ·∫£nh hi·ªÉn th·ªã ƒë√∫ng:

### 8.1 Ki·ªÉm tra upload ·∫£nh
- ƒê·∫£m b·∫£o th∆∞ m·ª•c `images/` ch·ª©a t·∫•t c·∫£ ·∫£nh (nh∆∞ `ml_workflow.png`, `json_structure.png`, v.v.) ƒë√£ ƒë∆∞·ª£c commit v√† push l√™n GitHub.
- Truy c·∫≠p repo tr√™n GitHub, ki·ªÉm tra xem th∆∞ m·ª•c `images/` c√≥ xu·∫•t hi·ªán v·ªõi c√°c file ·∫£nh kh√¥ng.
- L·ªánh Git:
  ```bash
  git add images/
  git commit -m "Add images for Markdown"
  git push origin main
  ```

### 8.2 S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n ƒë√∫ng
- **ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi**: N·∫øu file Markdown ·ªü root repo, d√πng:
  ```markdown
  ![T√™n h√¨nh](images/filename.png)
  ```
  - ƒê·∫£m b·∫£o t√™n file ƒë√∫ng (ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng, kh√¥ng d·∫•u c√°ch, d√πng `_` ho·∫∑c `-`).
- **Raw URL (khuy·∫øn ngh·ªã)**: L·∫•y URL raw t·ª´ GitHub:
  1. M·ªü ·∫£nh tr√™n GitHub (v√≠ d·ª•: `https://github.com/yourusername/yourrepo/blob/main/images/ml_workflow.png`).
  2. Click n√∫t **Raw** ƒë·ªÉ l·∫•y URL: `https://raw.githubusercontent.com/yourusername/yourrepo/main/images/ml_workflow.png`.
  3. D√πng trong Markdown:
     ```markdown
     ![T√™n h√¨nh](https://raw.githubusercontent.com/yourusername/yourrepo/main/images/filename.png)
     ```
- Thay `yourusername/yourrepo` b·∫±ng t√™n ng∆∞·ªùi d√πng v√† repo th·ª±c t·∫ø c·ªßa b·∫°n.

### 8.3 Ki·ªÉm tra l·ªói
- **Case-sensitive**: ƒê·∫£m b·∫£o t√™n file ch√≠nh x√°c (v√≠ d·ª•: `Image.png` ‚â† `image.png`).
- **Cache**: Refresh trang GitHub (Ctrl+F5) ho·∫∑c x√≥a cache browser.
- **Mobile**: N·∫øu ·∫£nh kh√¥ng load tr√™n app GitHub, th·ª≠ tr√™n desktop ho·∫∑c d√πng VPN (m·ªôt s·ªë ISP ch·∫∑n `raw.githubusercontent.com`).
- **Developer Tools**: M·ªü F12 > Console/Network, reload trang ƒë·ªÉ xem l·ªói (nh∆∞ 404 n·∫øu ƒë∆∞·ªùng d·∫´n sai).

### 8.4 Kh·∫Øc ph·ª•c l·ªói 404 Not Found
N·∫øu click v√†o link raw (nh∆∞ `https://raw.githubusercontent.com/yourusername/yourrepo/main/images/ml_workflow.png`) v√† nh·∫≠n l·ªói **404 Not Found**, h√£y l√†m nh∆∞ sau:
- **Ki·ªÉm tra th∆∞ m·ª•c `images/`**: 
  - M·ªü repo tr√™n GitHub, ƒë·∫£m b·∫£o th∆∞ m·ª•c `images/` t·ªìn t·∫°i v√† ch·ª©a file ·∫£nh ƒë√∫ng t√™n (v√≠ d·ª•: `ml_workflow.png`).
  - N·∫øu kh√¥ng th·∫•y: T·∫°o th∆∞ m·ª•c `images/` c·ª•c b·ªô, th√™m ·∫£nh, v√† commit:
    ```bash
    mkdir images
    # Copy ·∫£nh v√†o images/
    git add images/
    git commit -m "Add images for Markdown"
    git push origin main
    ```
- **Ki·ªÉm tra t√™n file**: ƒê·∫£m b·∫£o t√™n file kh√¥ng c√≥ d·∫•u c√°ch (d√πng `_` thay v√¨ kho·∫£ng tr·∫Øng, v√≠ d·ª•: `model_bias.png` thay v√¨ `model bias.png`) v√† ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng.
- **Ki·ªÉm tra branch**: N·∫øu repo d√πng `master` thay v√¨ `main`, s·ª≠a URL th√†nh:
  ```markdown
  ![T√™n h√¨nh](https://raw.githubusercontent.com/yourusername/yourrepo/master/images/filename.png)
  ```
- **T·∫°o ·∫£nh n·∫øu ch∆∞a c√≥**: D√πng Python ƒë·ªÉ t·∫°o (v√≠ d·ª• heatmap):
  ```python
  import seaborn as sns
  import matplotlib.pyplot as plt
  import pandas as pd
  import numpy as np
  df = pd.DataFrame(np.random.rand(10, 5), columns=['A', 'B', 'C', 'D', 'E'])
  plt.figure(figsize=(8, 6))
  sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
  plt.title('Correlation Heatmap')
  plt.savefig('images/correlation_heatmap.png', dpi=300, bbox_inches='tight')
  plt.show()
  ```
- **Test link raw**: Copy URL raw c·ªßa ·∫£nh, m·ªü trong tab m·ªõi. N·∫øu v·∫´n 404, ki·ªÉm tra l·∫°i b∆∞·ªõc commit.

### 8.5 GitHub Pages (n·∫øu s·ª≠ d·ª•ng)
- ƒê·∫∑t ·∫£nh trong th∆∞ m·ª•c `static/` ho·∫∑c `assets/`.
- C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n trong Markdown, v√≠ d·ª•:
  ```markdown
  ![T√™n h√¨nh](/assets/filename.png)
  ```
- Ki·ªÉm tra file `_config.yml` ƒë·ªÉ ƒë·∫£m b·∫£o c·∫•u h√¨nh ƒë√∫ng.

### 8.6 Debug n·∫øu v·∫´n l·ªói
- Cung c·∫•p link repo GitHub (v√≠ d·ª•: `https://github.com/username/repo`).
- Ki·ªÉm tra t√™n file ·∫£nh c·ª• th·ªÉ (v√≠ d·ª•: `ml_workflow.png`).
- M·ªü F12 > Console/Network tr√™n tr√¨nh duy·ªát ƒë·ªÉ xem l·ªói chi ti·∫øt (nh∆∞ 404, 403).

---

# ‚úÖ T√≥m t·∫Øt
- Quy tr√¨nh ML: Hi·ªÉu v·∫•n ƒë·ªÅ ‚Üí Thu th·∫≠p d·ªØ li·ªáu ‚Üí EDA ‚Üí Ti·ªÅn x·ª≠ l√Ω ‚Üí Chia d·ªØ li·ªáu ‚Üí X√¢y m√¥ h√¨nh ‚Üí ƒêi·ªÅu ch·ªânh si√™u tham s·ªë ‚Üí ƒê√°nh gi√° ‚Üí Tri·ªÉn khai ‚Üí Gi√°m s√°t.  
- C√¥ng c·ª•: **Pandas** (CSV, SQL), **pymongo** (MongoDB), **Dask/PySpark** (big data), **requests** (API).  
- X·ª≠ l√Ω d·ªØ li·ªáu: Missing values, outliers, imbalanced data, text/datetime.  
- Th·ªëng k√™: Hypothesis testing, bias-variance tradeoff.  
- EDA: Multicollinearity, feature selection.  
- M√¥ h√¨nh: H·ªìi quy, ph√¢n lo·∫°i, kh√¥ng gi√°m s√°t, neural networks.  
- Th·ª±c h√†nh ML c√≥ ƒë·∫°o ƒë·ª©c: Bias, privacy, explainability.  
- **GitHub**: ƒê·∫£m b·∫£o ·∫£nh hi·ªÉn th·ªã b·∫±ng c√°ch commit th∆∞ m·ª•c `images/`, d√πng raw URL, v√† kh·∫Øc ph·ª•c l·ªói 404.